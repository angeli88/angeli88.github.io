<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode on Angeli88 Blog</title>
    <link>https://angeli88.github.io/categories/leetcode/</link>
    <description>Recent content in leetcode on Angeli88 Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 08 Apr 2021 20:25:14 +0800</lastBuildDate><atom:link href="https://angeli88.github.io/categories/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>977-有序数组的平方</title>
      <link>https://angeli88.github.io/posts/leetcode/977/</link>
      <pubDate>Thu, 08 Apr 2021 20:25:14 +0800</pubDate>
      
      <guid>https://angeli88.github.io/posts/leetcode/977/</guid>
      <description>题目 给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。
排序解法 所有元素平方后排序。
时间：$O(nlogn)$ 空间:$O(n)$
class Solution { public int[] sortedSquares(int[] nums) { int len=nums.length; for(int i=0;i&amp;lt;len;i++){ nums[i]=nums[i]*nums[i]; } Arrays.sort(nums); return nums; } } 双指针 原数组为有序数组，若有负数，则数组两边均为绝对值较大的元素，双指针比较两边元素绝对值大小，大的则插入新数组右边，指针前移，当指针相遇时则完成整个过程。
时间：$O(n)$ 空间：$O(1)$
class Solution { public int[] sortedSquares(int[] nums) { int len=nums.length; int[] res=new int[len]; for(int i=0,j=len-1,pos=len-1;i&amp;lt;=j;pos--){ if(Math.abs(nums[i])&amp;gt;Math.abs(nums[j])){ res[pos]=nums[i]*nums[i]; ++i; }else{ res[pos]=nums[j]*nums[j]; --j; } } return res; } } </description>
    </item>
    
    <item>
      <title>面试题17.10</title>
      <link>https://angeli88.github.io/posts/leetcode/%E9%9D%A2%E8%AF%95%E9%A2%981710/</link>
      <pubDate>Tue, 06 Apr 2021 23:22:31 +0800</pubDate>
      
      <guid>https://angeli88.github.io/posts/leetcode/%E9%9D%A2%E8%AF%95%E9%A2%981710/</guid>
      <description>题目 数组中占比超过一半的元素称之为主要元素。给定一个整数数组，找到它的主要元素。若没有，返回-1。
题解 1.排序后比较中间元素 直接对数组进行排序，排序后取数组中间元素，计算其占比是否超过一半。
时间：$O(nlogn)$ 空间：$O(1)$
class Solution { public int majorityElement(int[] nums) { Arrays.sort(nums); int len=nums.length; int midNum=nums[len/2]; int count=0; for(int num:nums){ if(num==midNum){ count++; } } if(count&amp;gt;len/2){ return midNum; } return -1; } } 2.哈希表计数 创建一个map，将数组里每个元素的个数存储起来，再对map进行判断，若有个数大于一半的则为主要元素
时间：$O(n^2)$ 空间:$O(n)$
class Solution { public int majorityElement(int[] nums) { HashMap&amp;lt;Integer,Integer&amp;gt; hashMap=new HashMap&amp;lt;Integer,Integer&amp;gt;(); for(int num:nums){ if(hashMap.containsKey(num)){ hashMap.put(num,hashMap.get(num)+1); }else{ hashMap.put(num,1); } } for(Integer i:hashMap.keySet()){ if(hashMap.get(i)&amp;gt;nums.length/2){ return i; } } return -1; } } 3.</description>
    </item>
    
  </channel>
</rss>
