<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode on Angel Blog</title>
    <link>https://example.com/categories/leetcode/</link>
    <description>Recent content in leetcode on Angel Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Apr 2021 23:22:31 +0800</lastBuildDate><atom:link href="https://example.com/categories/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>面试题17.10</title>
      <link>https://example.com/posts/leetcode/%E9%9D%A2%E8%AF%95%E9%A2%981710/</link>
      <pubDate>Tue, 06 Apr 2021 23:22:31 +0800</pubDate>
      
      <guid>https://example.com/posts/leetcode/%E9%9D%A2%E8%AF%95%E9%A2%981710/</guid>
      <description>题目 数组中占比超过一半的元素称之为主要元素。给定一个整数数组，找到它的主要元素。若没有，返回-1。
题解 1.排序后比较中间元素 直接对数组进行排序，排序后取数组中间元素，计算其占比是否超过一半。
时间：O(nlogn) 空间：O(1)
class Solution { public int majorityElement(int[] nums) { Arrays.sort(nums); int len=nums.length; int midNum=nums[len/2]; int count=0; for(int num:nums){ if(num==midNum){ count++; } } if(count&amp;gt;len/2){ return midNum; } return -1; } } 2.哈希表计数 创建一个map，将数组里每个元素的个数存储起来，再对map进行判断，若有个数大于一半的则为主要元素
时间：O(n^2) 空间:O(n)
class Solution { public int majorityElement(int[] nums) { HashMap&amp;lt;Integer,Integer&amp;gt; hashMap=new HashMap&amp;lt;Integer,Integer&amp;gt;(); for(int num:nums){ if(hashMap.containsKey(num)){ hashMap.put(num,hashMap.get(num)+1); }else{ hashMap.put(num,1); } } for(Integer i:hashMap.keySet()){ if(hashMap.get(i)&amp;gt;nums.length/2){ return i; } } return -1; } } 3.</description>
    </item>
    
  </channel>
</rss>
